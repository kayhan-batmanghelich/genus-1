{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# GWAS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "True\n",
      "n_subjects genomic data: 21086\n"
     ]
    }
   ],
   "source": [
    "gwas_dir = \"/storage/gablab001/data/genus/GWAS/preprocessing\"\n",
    "sub_gwasdirs = [\"type1\", \"type2\"]\n",
    "\n",
    "for sg in sub_gwasdirs:\n",
    "    print(os.path.isdir(os.path.join(gwas_dir, sg)))\n",
    "    \n",
    "most_up_to_date = os.listdir(os.path.join(gwas_dir, sub_gwasdirs[1]))\n",
    "iids = []\n",
    "for gwas_file in most_up_to_date:\n",
    "    path = os.path.join(gwas_dir, sub_gwasdirs[1], gwas_file)\n",
    "    if os.path.isfile(path):\n",
    "        gwas_data = pd.read_hdf(path)\n",
    "        if 'IID' in gwas_data.columns:\n",
    "            iids.extend(gwas_data.IID.tolist())\n",
    "print(\"n_subjects genomic data: {}\".format(len(iids))) # that can't be right"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "n_subjects genomic data: 10334\n"
     ]
    }
   ],
   "source": [
    "unique_gwas_iid = np.unique(iids)\n",
    "print(\"n_subjects genomic data: {}\".format(unique_gwas_iid.shape[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Neuropsych"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "n_subjects neuropsych data: 7287\n"
     ]
    }
   ],
   "source": [
    "neuro_dir = \"/storage/gablab001/data/genus/NEURO/20170321\"\n",
    "neuro_file = os.path.join(neuro_dir, \"GENUS_neuropsych_data_processed.csv\")\n",
    "neuro_data = pd.read_csv(neuro_file)\n",
    "print(\"n_subjects neuropsych data: {}\".format(neuro_data.IID.values.shape[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# FreeSurfer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "n_subjects FreeSurfer data: 3279\n"
     ]
    }
   ],
   "source": [
    "fs_dir = \"/storage/gablab001/data/genus/PHENO/20170321\"\n",
    "fs_file = os.path.join(fs_dir, \"GENUS_all_FreeSurfer_phenotypes.csv\")\n",
    "fs_data = pd.read_csv(fs_file, low_memory=False)\n",
    "print(\"n_subjects FreeSurfer data: {}\".format(fs_data.IID.values.shape[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Neuropsych, FreeSurfer, Genomic overlap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "overlap between neuro_and_gwas is 5880, imputation most likely required for number to hold\n",
      "overlap between fs_neuro_gwas is 1414, imputation most likely required for number to hold\n",
      "overlap between fs_gwas is 1997, imputation most likely required for number to hold\n",
      "overlap between neuro_and_fs is 1815, imputation most likely required for number to hold\n"
     ]
    }
   ],
   "source": [
    "fs_iid = fs_data.IID.values\n",
    "neuro_iid = neuro_data.IID.values\n",
    "gwas_iid = np.array(unique_gwas_iid)\n",
    "\n",
    "def overlap(ids):\n",
    "    return np.array(list(set(ids[0]).intersection(*ids)))\n",
    "\n",
    "combinations = {\n",
    "    'neuro_and_fs': overlap([fs_iid, neuro_iid]),\n",
    "    'neuro_and_gwas': overlap([neuro_iid, gwas_iid]),\n",
    "    'fs_gwas': overlap([fs_iid, gwas_iid]),\n",
    "    'fs_neuro_gwas': overlap([fs_iid, gwas_iid, neuro_iid])\n",
    "}\n",
    "\n",
    "for key, val in combinations.items():\n",
    "    print(\"overlap between {} is {}, imputation most likely required for number to hold\".format(key, val.shape[0]))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
